import index from "instantsearch.js/es/widgets/index/index.js";
import { useEffect, useMemo, useRef } from 'react';
import { useIndexContext } from "./useIndexContext.js";
import { useInstantSearchServerContext } from "./useInstantSearchServerContext.js";
import { useInstantSearchSSRContext } from "./useInstantSearchSSRContext.js";
import { useForceUpdate } from "./useForceUpdate.js";
import { useIsomorphicLayoutEffect } from "./useIsomorphicLayoutEffect.js";
import { useStableValue } from "./useStableValue.js";
export function useIndex(props) {
  var serverContext = useInstantSearchServerContext();
  var ssrContext = useInstantSearchSSRContext();
  var parentIndex = useIndexContext();
  var stableProps = useStableValue(props); // On SSR rendering, we add the Index early in a memo to render the initial
  // results in the render pass. Since the Index is added already, we need to
  // skip the usual browser effect that adds the widget when client-side
  // rendering. We still need to run the effect lifecycle on all the other renders.
  // This ref lets us keep track whether the initial effect to add the Index
  // should be skipped.

  var shouldAddIndexRef = useRef(true);
  var indexWidget = useMemo(function () {
    var instance = index(stableProps); // On the server, we directly add the Index in the memo scope to retrieve
    // its child widgets' search parameters in the render pass.
    // On SSR, we also add the Index here to synchronize the search state associated
    // to the widgets.
    // In these environments, we flag that we've added the widgets early to skip
    // the initial browser effect that would otherwise add the Index a second time.

    if (serverContext || ssrContext !== null && ssrContext !== void 0 && ssrContext.initialResults) {
      parentIndex.addWidgets([instance]);
      shouldAddIndexRef.current = false;
    }

    return instance;
  }, [parentIndex, serverContext, ssrContext === null || ssrContext === void 0 ? void 0 : ssrContext.initialResults, stableProps]);
  var helper = indexWidget.getHelper();
  var forceUpdate = useForceUpdate();
  useEffect(function () {
    forceUpdate();
  }, [helper, forceUpdate]);
  useIsomorphicLayoutEffect(function () {
    if (shouldAddIndexRef.current) {
      parentIndex.addWidgets([indexWidget]);
    }

    return function () {
      parentIndex.removeWidgets([indexWidget]);
      shouldAddIndexRef.current = true;
    };
  }, [parentIndex, indexWidget]);
  return indexWidget;
}